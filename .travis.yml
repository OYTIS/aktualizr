dist: trusty
sudo: false
language: cpp
branches:
  only:
    - master
    - /^\d\d\d\d\.\d+$/
env:
- DOCKERFILE=Dockerfile CACHE=latest SCRIPT=src/scripts/coverage.sh
- DOCKERFILE=Dockerfile.nop11 CACHE=latest SCRIPT=src/scripts/test.sh
- DOCKERFILE=Dockerfile.deb-stable CACHE=latest-deb-stable SCRIPT=src/scripts/test.sh
  DARGS="-eBUILD_ONLY=1 -eBUILD_DEB=1"
- DOCKERFILE=Dockerfile.deb-unstable CACHE=latest-deb-unstable SCRIPT=src/scripts/test.sh
  DARGS="-eBUILD_ONLY=1"
- DOCKERFILE=Dockerfile.gcc4 CACHE=latest SCRIPT=src/scripts/test.sh DARGS="-eBUILD_ONLY=1"
- DOCKERFILE=Dockerfile.16.04 CACHE=latest SCRIPT=src/scripts/build-ubuntu.sh
services:
- docker
script:
- docker pull advancedtelematic/aktualizr:$CACHE
- docker build --cache-from advancedtelematic/aktualizr:$CACHE -t advancedtelematic/aktualizr
  -f ${DOCKERFILE} .
- ci_env=`bash <(curl -s https://codecov.io/env)`
- docker run -v /persistent:/persistent $ci_env $DARGS --name "$CACHE" -it advancedtelematic/aktualizr
  ${SCRIPT}
- "./scripts/test_deb_in_docker.sh ${DOCKERFILE}"
- "./scripts/test_aktualizr_deb_ubuntu.sh ${DOCKERFILE}"
deploy:
        - provider: releases
          file: /persistent/garage_deploy.deb
          skip-cleanup: true
          on:
                  tags: true
                  all_branches: true
                  repo: advancedtelematic/aktualizr
                  condition: $DOCKERFILE = Dockerfile.deb-stable

          api_key:
                  secure: ${GITHUB_API_KEY}

        - provider: releases
          file: /persistent/aktualizr.deb
          skip-cleanup: true
          on:
                  tags: true
                  all_branches: true
                  repo: advancedtelematic/aktualizr
                  condition: $DOCKERFILE = Dockerfile.16.04
          api_key:
                  secure: ${GITHUB_API_KEY}
